<?xml version="1.0"?>
<!-- =================================================================== -->
<!-- Name:         t24ivy                                                -->
<!-- Description:  This build file enables other projects importing      -->
<!--               this file to use the Ivy dependency manager to        -->
<!--               download dependencies and publish build artifacts.    -->
<!-- Properties:   t24ivy.dir - Path to the ivy home directory           -->
<!--               artifact.dir - Publish directory                      -->
<!-- =================================================================== -->
<project name="t24ivy" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
	<taskdef uri="antlib:fr.jayasoft.ivy.ant" resource="fr/jayasoft/ivy/ant/antlib.xml">
		<classpath>
			<pathelement location="${t24ivy.dir}/ivy-2.2.0.jar" />
			<fileset dir="${t24ivy.dir}/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<!-- load properties from environment -->
	<property environment="env" />

	<!-- Default project properties -->
	<property name="local.ivy.repository.dir" value="${user.home}" />
	<property name="project.dir" value="${basedir}" />
	<property name="project.ivy.xml" value="${project.dir}/version.xml" />
	<available file="${project.ivy.xml}" property="ivy.xml.present" />

	<!-- =================================================================== -->
	<!-- Publish target                                                      -->
	<!-- =================================================================== -->
	<target name="publish" description="publish dependencies with ivy">
		<property name="publishHaltOnMissing" value="true" />
		<ivy:publish resolver="publisher" pubrevision="${minor.project.version}" status="release" forcedeliver="true" overwrite="true" haltonmissing="${publishHaltOnMissing}">
			<artifacts pattern="${artifact.dir}/([platform]/)[artifact](-[type]).[ext]" />
		</ivy:publish>
		<echo message="project ${project.name} released with version ${ivy.revision}" />
	</target>

	<!-- =================================================================== -->
	<!-- Publish target to p4                                                -->
	<!-- =================================================================== -->
	<target name="p4publish" if="P4.PUBLISH.IS.ENABLE" depends="get.os.platform">
		<echo message="[Project ${project.name}] Publishing artifacts to ${p4.publisher.dir} with version ${ivy.revision}" />
		<delete dir="${env.P4SRCROOT}" />

		<!-- Pre-publish artifacts to obtain list of files -->
		<ivy:publish resolver="p4publisher" pubrevision="${minor.project.version}" status="release" forcedeliver="true" overwrite="true" haltonmissing="false">
			<artifacts pattern="${artifact.dir}/([platform]/)[artifact](-[type])(.[ext])" />
		</ivy:publish>

		<!-- Create new change for DEV branch-->
		<if>
			<equals arg1="${env.WHO_PUBLISH_INDEPENDENT_ARTIFACT}" arg2="${platform}" />
			<then>
				<!--includes all the artifacts-->
				<fileset id="dev.change.sets" dir="${p4.publisher.dir}">
					<include name="**/*latest-dev*" />
				</fileset>
			</then>
			<else>
				<!--only includes platform specific artifacts-->
				<fileset id="dev.change.sets" dir="${p4.publisher.dir}">
					<include name="**/${platform}/*latest-dev*" />
				</fileset>
			</else>
		</if>

		<!--only changes set is not empty, then create p4 change set-->
		<if>
			<not>
				<equals arg1="" arg2="${toString:dev.change.sets}"/>
			</not>
			<then>
				<p4change description="Add published files of ${project.name} to ivy repository." />
				<foreach param="file" target="p4edit_file">
					<path>
						<fileset refid="dev.change.sets"/>
					</path>
					<param name="p4ChangeNumber" value="${p4.change}"/>
				</foreach>
				<!--overrite the artifacts sync down from ivy repository-->
				<ivy:publish resolver="p4publisher" pubrevision="${minor.project.version}" status="release" forcedeliver="true" overwrite="true" haltonmissing="false">
					<artifacts pattern="${artifact.dir}/([platform]/)[artifact](-[type])(.[ext])" />
				</ivy:publish>
			</then>
		</if>

		<!-- Create new change for RELEASE branch-->
		<if>
			<equals arg1="${env.WHO_PUBLISH_INDEPENDENT_ARTIFACT}" arg2="${platform}" />
			<then>
				<!--includes all the artifacts-->
				<fileset id="rel.change.sets" dir="${p4.publisher.dir}">
					<include name="**/*.*" />
					<exclude name="**/*latest-dev.*"/>
				</fileset>
			</then>
			<else>
				<!--only includes platform specific artifacts-->
				<fileset id="rel.change.sets" dir="${p4.publisher.dir}">
					<include name="**/${platform}/*.*" />
					<exclude name="**/*latest-dev.*"/>
				</fileset>
			</else>
		</if>

		<!--only changes set is not empty, then create p4 change set-->
		<if>
			<not>
				<equals arg1="" arg2="${toString:rel.change.sets}" />
			</not>
			<then>
				<p4change description="Add published files of ${project.name} to ivy repository." />
				<!-- Add files which are not latest-dev -->
				<p4add changelist="${p4.change}">
					<fileset refid="rel.change.sets" />
				</p4add>
			</then>
		</if>

		<!-- Submit change -->
		<echo message="[Project ${project.name}] Adding published artifacts to p4." />
		<p4submit change="${p4.change}" />
	</target>

	<target name="p4edit_file">
		<echo message="p4 edit change ${p4ChangeNumber}, file ${file}" />
		<p4sync view="${file}" force="yes" />
		<p4edit change="${p4ChangeNumber}" view="${file}" />
	</target>
	
	<!-- ==================== Initialise ivy ==================== -->
	<target name="ivy.init" unless="ivy.initialized" if="ivy.xml.present" depends="get.patch.version" description="Initialise ivy settings">
		<echo message="Ivy file: ${project.ivy.xml}" />

		<!-- Configure ivy resolver -->
		<property name="ivy.settings.file" value="${t24ivy.dir}/ivy-settings.xml" />
		<ivy:settings file="${ivy.settings.file}" />

		<!-- Resolve project dependencies -->
		<property name="haltonfailure" value="true" />
		<ivy:resolve file="${project.ivy.xml}" haltonfailure="${haltonfailure}" />

		<property name="project.vendor" value="${ivy.organisation}" />
		<property name="project.name" value="${ivy.module}" />

		<!-- Get the version -->
		<property file="${project.pwd}/minor.revision" />
		<condition property="minor.revision.supported" value="true" else="false">
			<and>
				<isset property="minor.revision" />
			</and>
		</condition>
		<if>
			<equals arg1="${minor.revision.supported}" arg2="true" />
			<then>
				<property name="minor.project.version" value="${minor.revision}" />
			</then>
			<else>
				<property name="minor.project.version" value="latest-dev" />
			</else>
		</if>
		<xmlproperty file="version.xml" id="ivy-module.info" />
		<condition property="major.project.version" value="${ivy-module.info(branch)}" else="unknown-branch">
			<isset property="ivy-module.info(branch)" />
		</condition>
		<property name="project.version" value="${major.project.version}.${minor.project.version}" />
		
		<!-- Check whether we should publish to the remote repository -->
		<condition property="P4.PUBLISH.IS.ENABLE">
			<and>
				<istrue value="${env.P4_PUBLISH_ENABLE}"/>
				<isfalse value="${disable.p4.publish}"/>
			</and>
		</condition>
		
		<property name="ivy.initialized" value="true" />
	</target>

	<target name="get.patch.version" if="project.patch.version">
		<!-- Set the patch version number (Project version = [branch].${project.patch.version}) -->
		<property name="minor.revision" value="${project.patch.version}" />
	</target>

	<!-- ==================== Initialise platform-specific dependencies in version.xml ==================== -->
	<target name="ivy.init.platform" unless="ivy.platform.initialized" depends="get.os.platform" description="Initialise platform specific Ivy settings">
		<condition property="is.set.platform">
			<isset property="platform" />
		</condition>
		<if>
			<equals arg1="${is.set.platform}" arg2="true" />
			<then>
				<!-- TAFC build - set platform property for platform specific dependencies -->
				<echo message="Generating ivy file: ${basedir}${file.separator}build/version-${platform}.xml" />
				<copy file="${project.ivy.xml}" toFile="${basedir}${file.separator}build/version-${platform}.xml" overwrite="true" />
				<var name="project.ivy.xml" value="${basedir}${file.separator}build/version-${platform}.xml" />
				<condition property="isWindows">
					<os family="windows" />
				</condition>
				<if>
					<equals arg1="${isWindows}" arg2="true" />
					<then>
						<replaceregexp file="${project.ivy.xml}" match="(.*)#PLATFORM_UNIX#(.*)" replace="" byline="true" />
					</then>
					<else>
						<replaceregexp file="${project.ivy.xml}" match="(.*)#PLATFORM_WIN#(.*)" replace="" byline="true" />
					</else>
				</if>
				<replace file="${project.ivy.xml}" token="#PLATFORM#" value="${platform}" />
				<replace file="${project.ivy.xml}" token="#PLATFORM_UNIX#" value="${platform}" />
				<replace file="${project.ivy.xml}" token="#PLATFORM_WIN#" value="${platform}" />
				<replace file="${project.ivy.xml}" token="#SERVICE_NAME#" value="${service.name}" />
			</then>
			<else>
				<!-- TAFJ build - remove platform specific dependencies -->
				<echo message="Generating ivy file: ${basedir}${file.separator}build/version-all.xml" />
				<copy file="${project.ivy.xml}" toFile="${basedir}${file.separator}build/version-all.xml" overwrite="true" />
				<var name="project.ivy.xml" value="${basedir}${file.separator}build/version-all.xml" />
				<replaceregexp file="${project.ivy.xml}" match="(.*)#PLATFORM#(.*)" replace="" byline="true" />
				<replaceregexp file="${project.ivy.xml}" match="(.*)#PLATFORM_UNIX#(.*)" replace="" byline="true" />
				<replaceregexp file="${project.ivy.xml}" match="(.*)#PLATFORM_WIN#(.*)" replace="" byline="true" />
				<replace file="${project.ivy.xml}" token="#SERVICE_NAME#" value="${service.name}" />
			</else>
		</if>
		
		<property name="ivy.platform.initialized" value="true" />
	</target>

	<!-- ============== Obtain a string identifying the O/S platform ============== -->
	<target name="get.os.platform" if="env.TAFC_HOME" unless="platform" description="Obtain a string identifying the O/S platform">
		<property name="platform.tool.dir" value="${basedir}${file.separator}build" />
		<property name="platform.tool.src.dir" value="${t24ivy.dir}/platform" />
		<copy file="${platform.tool.src.dir}/platform.c" toDir="${platform.tool.dir}" />
		<exec executable="jcompile" newenvironment="false" dir="${platform.tool.dir}" failonerror="true">
			<arg line="platform.c" />
			<arg value="-oplatform" />
			<arg value="-E" />
			<arg value="-R" />
		</exec>
		<exec executable="${platform.tool.dir}/platform" newenvironment="false" failonerror="true" outputproperty="platform" />
	</target>

	<!-- =================================================================== -->
	<!-- Initialisation                                                      -->
	<!-- =================================================================== -->
	<target name="env.init" unless="env.build.initialised" description="Initialise the build environment">
		<!-- detect OS name-->
		<condition property="isWindows">
			<os family="windows" />
		</condition>
		<condition property="isLinux">
			<os name="Linux" />
		</condition>
		<condition property="isSolaris">
			<or>
				<os name="Solaris" />
				<os name="SunOS" />
			</or>
		</condition>
		<condition property="isAIX">
			<os name="AIX" />
		</condition>
		<condition property="isHPUX">
			<or>
				<os name="HP-UX" />
				<os name="HP UX" />
			</or>
		</condition>
		<condition property="isSparc">
			<os arch="sparc" />
		</condition>
		<condition property="P4.PUBLISH.IS.ENABLE">
			<istrue value="${env.P4_PUBLISH_ENABLE}" />
		</condition>

		<!--jcompiler environment-->
		<property name="CCSLIB_ENV" value="CCSLIB" />
		<property name="CCEXE_ENV" value="CCEXE" />
		<property name="CCEXEOPTS_ENV" value="CCEXEOPTS" />
		<property name="HP_CPP" value="aCC" />
		<property name="SUN_CPP" value="CC" />
		<property name="AIX_CPP" value="xlC_r" />
		<if>
			<equals arg1="${isSparc}" arg2="true" />
			<then>
				<property name="SUN_CPPEXE_OPTS" value="-mt -KPIC -w -m64 -library=stlport4" />
			</then>
			<else>
				<property name="SUN_CPPEXE_OPTS" value="-mt -KPIC -w -m64 -library=stlport4" />
			</else>
		</if>
		
		<property name="env.build.initialised" value="true" />
	</target>
</project>
